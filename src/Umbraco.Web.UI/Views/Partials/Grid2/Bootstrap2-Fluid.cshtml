@inherits UmbracoViewPage<Grid2Value>
@if (Model != null && Model.Rows != null)
{
    <div class="umb-grid">
        <div class="grid-section">
            @foreach (var row in Model.Rows)
            {
                <div @RenderElementAttributes(row.Settings)>
                    <div class="container-fluid">
                        <div class="row-fluid clearfix">
                            @foreach (var cell in row.Cells)
                            {
                                <div class="@("span" + cell.Colspan) column">
                                    <div @RenderElementAttributes(cell.Settings)>
                                        @foreach (var item in cell.Items)
                                        {
                                            @Html.Partial("Grid2/Editors/Base", item)
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@functions {
    public static MvcHtmlString RenderElementAttributes(IPublishedElement settings)
    {
        var attributes = new List<string>();

        // FIXME: We'll need to discuss how the old "config" and "styles" would work here. [LK:2018-05-20]


        //var cfg = contentItem.Config;

        //if (cfg != null)
        //{
        //    foreach (JProperty property in cfg.Properties())
        //    {
        //        var propertyValue = HttpUtility.HtmlAttributeEncode(property.Value.ToString());
        //        attrs.Add(property.Name + "=\"" + propertyValue + "\"");
        //    }
        //}

        //var style = contentItem.Styles;

        //if (style != null)
        //{
        //    var cssVals = new List<string>();
        //    foreach (JProperty property in style.Properties())
        //    {
        //        var propertyValue = property.Value.ToString();
        //        if (string.IsNullOrWhiteSpace(propertyValue) == false)
        //        {
        //            cssVals.Add(property.Name + ":" + propertyValue + ";");
        //        }
        //    }

        //    if (cssVals.Count > 0)
        //        attrs.Add("style=\"" + HttpUtility.HtmlAttributeEncode(string.Join(" ", cssVals)) + "\"");
        //}

        if (settings != null)
        {
            foreach (var property in settings.Properties)
            {
                var propertyValue = HttpUtility.HtmlAttributeEncode(property.Value<string>());
                attributes.Add($"{property.Alias}=\"{propertyValue}\"");
            }
        }

        return new MvcHtmlString(string.Join(" ", attributes));
    }
}
