@using System.Collections
@using System.Net.Http
@using System.Web.Mvc.Html
@using Umbraco.Core
@using ClientDependency.Core
@using ClientDependency.Core.Mvc
@using Microsoft.Owin.Security
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Umbraco.Core.IO
@using Umbraco.Web
@using Umbraco.Web.Editors
@using umbraco

@inherits System.Web.Mvc.WebViewPage


<!DOCTYPE html>

<html lang="en">
<head>
    <base href="@GlobalSettings.Path.EnsureEndsWith('/')" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="robots" content="noindex, nofollow">

    <title ng-bind="$root.locationTitle">Umbraco</title>

    @{
        Html
            .RequiresCss("assets/css/umbraco.css", "Umbraco")
            .RequiresCss("tree/treeicons.css", "UmbracoClient")
            .RequiresCss("lib/bootstrap-social/bootstrap-social.css", "Umbraco")
            .RequiresCss("lib/font-awesome/css/font-awesome.min.css", "Umbraco");
    }
    @Html.RenderCssHere(
        new BasicPath("Umbraco", IOHelper.ResolveUrl(SystemDirectories.Umbraco)),
        new BasicPath("UmbracoClient", IOHelper.ResolveUrl(SystemDirectories.UmbracoClient)))


</head>
<body ng-class="{touch:touchDevice,emptySection:emptySection}" ng-controller="Umbraco.MainController" id="umbracoMainPageBody">
    <div ng-hide="!authenticated" ng-cloak id="mainwrapper" id="mainwrapper" class="clearfix" ng-click="closeDialogs($event)">

        <umb-navigation></umb-navigation>

        <section id="contentwrapper">
            <div id="contentcolumn" ng-view>
            </div>
        </section>

    </div>

    <umb-notifications></umb-notifications>


    @{
        var loginProviders = Context.GetOwinContext().Authentication.GetExternalAuthenticationTypes()
            .Where(p => p.Properties.ContainsKey("UmbracoBackOffice"))
            .Select(p => new
            {
                authType = p.AuthenticationType,
                caption = p.Caption,
                properties = p.Properties
            })
            .ToArray();
    }

    @*
        These are the bare minimal server variables that are required for the application to start without being authenticated,
        we will load the rest of the server vars after the user is authenticated.
    *@
    <script type="text/javascript">
        var Umbraco = {};
        Umbraco.Sys = {};
        Umbraco.Sys.ServerVariables = {
            "umbracoUrls": {
                "authenticationApiBaseUrl": "@(Url.GetUmbracoApiServiceBaseUrl<AuthenticationController>(controller => controller.PostLogin(null)))",
                "serverVarsJs": "@Url.GetUrlWithCacheBust("ServerVariables", "BackOffice")",
                "externalLoginsUrl": "@(Url.Action("ExternalLogin", "BackOffice", new {area = ViewBag.UmbracoPath}))"
        },
        "application": {
            "applicationPath" : "@Context.Request.ApplicationPath"
            }
    };       
    </script>

    <script>
    //define a callback that is executed when we bootstrap angular, this is used to inject angular values
    //with server side info
    document.angularReady = function(app) {
        //add external login values
        var errors = [];
        @if (ViewBag.ExternalSignInError != null)
            {
                foreach (var error in ViewBag.ExternalSignInError)
                {
                    <text>errors.push("@error");</text>
                }
            }
            app.value("externalLoginInfo", {
                errors: errors,
                providers: @Html.Raw(JsonConvert.SerializeObject(loginProviders))
            });
        }
    </script>



    @*And finally we can load in our angular app*@
    <script type="text/javascript" src="lib/rgrove-lazyload/lazyload.js"></script>
    <script type="text/javascript" src="@Url.GetUrlWithCacheBust("Application", "BackOffice")"></script>

    @{
        var isDebug = false;
        if (Request.RawUrl.IndexOf('?') >= 0)
        {
            var parsed = HttpUtility.ParseQueryString(Request.RawUrl.Split('?')[1]);
            var attempt = parsed["umbDebug"].TryConvertTo<bool>();
            if (attempt && attempt.Result)
            {
                isDebug = true;
            }
        }

    }
    @if (isDebug)
    {
        @Html.RenderProfiler()
    }

</body>
</html>
